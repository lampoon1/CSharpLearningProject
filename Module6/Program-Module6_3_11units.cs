//////////////////////////////////////////////////////////////////////////////
//2025/9/6 
//Module 6:  3 - Implement exception handling in C# console applications
//total 11 units
////////////////////////////////////////////////////////////////////////////////
//In this modile, you Learn about exceptions, 
//the exception handling process supported by C#, 
//and then implement exception handling patterns for various coding scenarios.
////////////////////////////////////////////////////
//Unit 1 of 11. Introduction
//try-catch-finally keywords
///////////////////////////////////
/*
Learning objectives
1. Examine the basic categories of exceptions and review some common system exceptions.
2. Examine the exception handling tools included with C# and the techniques for these tools.
3. Implement the try-catch pattern within various console application scenarios.
*/
/*
Prerequisites:
- An installation of Visual Studio Code that's configured for C# application development.
- Ability to develop C# console applications that implement business logic using iteration statements, 
        selection statements, and custom methods.
- A basic understanding of the relationship between errors and exceptions in C#.
- Experience using the Visual Studio Code debugging tools for C#.
*/
////////////////////////////////////////
/// Unit 2 - Examine exceptions and the exception handling process
/////////////////// 
/*
Runtime errors in a C# application are managed using a mechanism called exceptions. 
Exceptions provide a structured, uniform, and type-safe way of handling both system level 
and application-level error conditions. Exceptions are generated by the .NET runtime or by the code in an application. 

Common scenarios:
User input: 
Exceptions can occur when code processes user input. 
For example, exceptions occur when the input value is in the wrong format or out of range.

Data processing and computations: 
Exceptions can occur when code performs data calculations or conversions. 
For example, exceptions occur when code attempts to divide by zero, 
cast to an unsupported type, or assign a value that's out of range.

File input/output operations: 
Exceptions can occur when code reads from or writes to a file. 
For example, exceptions occur when the file doesn't exist, the program doesn't have permission to access the file, 
or the file is in use by another process.

Database operations: 
Exceptions can occur when code interacts with a database. F
or example, exceptions occur when the database connection is lost, 
a syntax error occurs in a SQL statement, or a constraint violation occurs.

Network communication: 
Exceptions can occur when code communicates over a network. 
For example, exceptions occur when the network connection is lost, a timeout occurs, 
or the remote server returns an error.

Other external resources: E
xceptions can occur when code communicates with other external resources. 
Web Services, REST APIs, or third-party libraries, can throw exceptions for various reasons. 
For example, exceptions occur due to network connections issues, malformed data, etc.
*/
///////////////////////////////////////////////////////////
//Exception handling keywords, code blocks, and patterns
//Exception handling in C# is implemented by using the try, catch, and finally keywords. 
//Each of these keywords has an associated code block and can be used to satisfy a specific goal 
//in your approach to exception handling. 
//For example:
/*
try
{   
   // try code block - code that may generate an exception
}
catch
{   
   // catch code block - code to handle an exception
}
finally
{   
   // finally code block - code to clean up resources
}
*/
/*
Note
The C# language also enables your code to generate an exception object by using the throw keyword. 
Exception handling scenarios that include using the throw keyword to generate exceptions 
is covered in a separate module on Microsoft Learn.
Exception handling in a C# application is generally implemented using one or more of the following patterns:

The try-catch pattern consists of a try block followed by one or more catch clauses. 
Each catch block is used to specify handlers for different exceptions.
The try-finally pattern consists of a try block followed by a finally block. 
Typically, the statements of a finally block run when control leaves a try statement.
The try-catch-finally pattern implements all three types of exception handling blocks. 
A common scenario for the try-catch-finally pattern is when resources are obtained and used in a try block, 
exceptional circumstances are managed in a catch block, and the resources are released or otherwise managed in the finally block.
*/
/*
How are exceptions represented in code?
NOTE
Although they are sometimes used interchangeably, a class and an object are different things. 
A class defines a type of object, but it's not an object itself. An object is a concrete entity based on a class.
*/
//////////////////////////////////
//Exception handling process
//Exception handling and the call stack

////////////
//Recap
//////////
//1. Common scenarios that may require exception handling include user input, data processing, 
//      file I/O operations, database operations, and network communication.
//2. Exception handling in C# is implemented using try, catch, and finally keywords. 
//      Each keyword has an associated code block that serves a specific purpose.
//3. Exceptions are represented as types and derived from the System.Exception class in .NET. 
//      Exceptions contain information that identifies the type of exception, and properties that provide additional details.
//4. When an exception occurs, the .NET runtime searches for the nearest catch clause that can handle it. 
//      The search starts with the method where the exception was thrown, and moves down the call stack if necessary.
//////////////////////////////////////////////////////////
/// Unit 3 Examine compiler-generated exceptions
////////////////////////////////////////////////
//2025/9/8 Lam: what I did was going to chat-gpt asked how to create a console app
//and with debugging available in VS code
//jump out of current sln and csproj
//post errors and ask for answers follow steps and able to bring up
//a DebugTest project
//Issue: about the extension I installed with .net dev kit
//Solution: able to say yes/no on certain prompts. go to F1 and typed in some commands
//          now the project has created launch.json and tasks.json and a .vscode folder within the project
///
/// //continued to review unit 4, 5, 6 similar to the chatgpt suggested steps to try-catch-finally projects
/// 
/// resume challentge activity in DebugTest project - this one is about exceptions, using try-catch-finally.
/// so let's go to DebugTest project's Program.cs file
/// next is unit 8-9: another challenge activity
/// unit 10-11 is assessment and summary
/////////////////End of this module////////////////////////////////////////
